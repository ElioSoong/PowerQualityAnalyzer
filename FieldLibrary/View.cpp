/****************************************Copyright (c)****************************************************
**
**                                       D.H. InfoTech
**
**--------------File Info---------------------------------------------------------------------------------
** File name:                  View.cpp
** Latest Version:             V1.0.0
** Latest modified Date:       2016/3/1
** Modified by:                
** Descriptions:               
**
**--------------------------------------------------------------------------------------------------------
** Created by:                 
** Created date:               2016/2/29
** Descriptions:               View class  [Generated by VP-UML, IGT1.0]
** 
*********************************************************************************************************/
#include "includes.h"
#include "View.h"

#include  <QWidget>

/*!
 * Constructor
 */
View::View(QWidget *parent) 
    : m_widgetObject(NULL)
    , m_flags(0)
    , m_default(false)
{
    Q_UNUSED(parent);
}

/*! 
 * 设置视图的主标题
 * @param[in]  title  视图的主标题
 */
void View::setTitle(QString title)
{
    this->m_title = title;
}

/*! 
 * 获得视图的主标题
 * @return     QString   主标题
 */
QString View::title() const
{
    return this->m_title;
}

/*! 
 * 获得视图的主标题
 * @return     QString   主标题
 */
void View::setSubTitle(QString subTitle)
{
    this->m_subTitle = subTitle;
}

/*! 
 * 设置视图的副标题
 * @param[in]  title  视图的副标题
 */
QString View::subTitle() const
{
    return this->m_subTitle;
}

/*! 
 * 设置视图标志位
 * @param[in]  视图标志位
 */
void View::setFlags(int flags)
{
    this->m_flags = flags;
}

/*! 
 * 获得视图标志位
 * @return     int   视图标志位
 */
int View::flags() const
{
    return this->m_flags;
}

/*! 
 * 设置当前视图对应的主控件
 * @param[in]  widget   当前视图对应的主控件
 */
void View::setWidget(QWidget* widget)
{
    m_widgetObject = widget;
}

/*! 
 * 获得当前视图对应的主控件
 * @return     QWidget*    当前视图对应的主控件
 */
QWidget* View::widget() const
{
    // 此处预判断this，用于避免以下代码崩溃： [5/30/2016 CHENHONGHAO]
    // EventListView* eventView = qobject_cast<EventListView*>(activity->pqaView("eventView")->widget());
    QWidget *w = qobject_cast<QWidget*>(m_widgetObject);
    if (w)
    {
        return w;
    }
    return NULL;
}
/** 
 * 设置当前视图对应的对象,此处是为了适应通过json创建QML对象，此处与widget相同
 */
void View::setItem(QObject* object)
{
    m_widgetObject = object;
}
/** 
 * 获取当前视图对应的对象
 */
QObject* View::item() const
{
    return this ? m_widgetObject : NULL;
}

QList<QAction*> View::actions() const
{
    QWidget *w = widget();
    if (!w)
        return QList<QAction*>();

    return w->actions();
}

void View::setActions(const QList<QAction*>& actions)
{
    QWidget *w = widget();
    if (!w)
        return;

    w->addActions(actions);
}

MenuItem* View::menuItem(int index)
{
    int count = m_menuItems.count();
    if (index > count - 1)
    {
        return NULL;
    }
    return m_menuItems[index];
}

/*********************************************************************************************************
** class MenuItem
*********************************************************************************************************/
FieldWidgetCreator* MenuItem::s_widgetCreator = NULL;
MenuItem::MenuItem()
    : QObject()
    , m_widgetObject(NULL)
{

}

QObject* MenuItem::createWidgetObject() const
{
    if (s_widgetCreator)
    {
        return s_widgetCreator->createFieldWidget(fieldPath());
    }
    return NULL;
}

QObject* MenuItem::widgetObject() const
{
    if (!m_widgetObject)
    {
        const_cast<MenuItem*>(this)->m_widgetObject = createWidgetObject();
    }

    return m_widgetObject;
}

/*********************************************************************************************************
** End of file
*********************************************************************************************************/
