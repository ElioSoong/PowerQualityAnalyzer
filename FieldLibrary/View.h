/****************************************Copyright (c)****************************************************
**
**                                       D.H. InfoTech
**
**--------------File Info---------------------------------------------------------------------------------
** File name:                  View.h
** Latest Version:             V1.0.0
** Latest modified Date:       2016/3/1
** Modified by:                
** Descriptions:               
**
**--------------------------------------------------------------------------------------------------------
** Created by:                 
** Created date:               2016/2/29
** Descriptions:               View class  [Generated by VP-UML, IGT1.0]
** 
*********************************************************************************************************/
#ifndef __VIEW_H__
#define __VIEW_H__

#include "includes.h"
#include "fieldlibrary_global.h"
#include "FieldWidgetCreator.h"

#include <QWidget>
#include <QUrl>
#include <QPixmap>
#include <QAction>

class FIELDLIBRARY_EXPORT MenuItem : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString fieldPath READ fieldPath WRITE setFieldPath)
    Q_PROPERTY(QPixmap icon READ icon WRITE setIcon)
    Q_PROPERTY(QString text READ text WRITE setText)
    Q_PROPERTY(QString iconPath READ iconPath WRITE setIconPath)
    Q_PROPERTY(QWidget* widget   READ     widget    WRITE setWidget)
    Q_PROPERTY(QObject* item     READ     item      WRITE setItem)
public:
    MenuItem();
    MenuItem(const MenuItem &){}
    /** 
     * 设置或获取fieldPath
     */
    void setFieldPath(const QString &path)
    {
        m_fieldPath = path;
        if (s_widgetCreator && !m_widgetObject)
        {
            m_widgetObject = s_widgetCreator->createFieldWidget(m_fieldPath);
        }
    }
    QString fieldPath() const
    {
        return m_fieldPath;
    }
    /** 
     * 设置或获取icon
     */
    void setIcon(const QPixmap &icon)
    {
        m_icon = icon;
    }
    QPixmap icon() const
    {
        return m_icon;
    }
    /** 
     * 设置或获取text
     */
    void setText(const QString &text)
    {
        m_text = text;
    }
    QString text() const
    {
        return m_text;
    }
    /**
    * 设置或获取iconPath
    */
    void setIconPath(const QString &iconPath)
    {
        m_iconPath = iconPath;
    }
    QString iconPath() const
    {
        return m_iconPath;
    }

    /*! 
     * 设置当前视图对应的主控件
     * @param[in]  widget   当前视图对应的主控件
     */
    void setWidget(QWidget* widget)
    {
        setWidgetObject(widget);
    }

    /*! 
     * 获得当前视图对应的主控件
     * @return     QWidget*    当前视图对应的主控件
     */
    QWidget* widget() const
    {
        return qobject_cast<QWidget*>(widgetObject());
    }
    
    /** 
     * 设置当前视图对应的对象,此处是为了适应通过json创建QML对象
     * @return
     */
    void setItem(QObject* object)
    {
        setWidgetObject(object);
    }

    /** 
     * 获取当前视图对应的对象
     * @return
     */
    QObject* item() const
    {
        return widgetObject();
    }
    static void setFieldWidgetCreator(FieldWidgetCreator* creator)
    {
        s_widgetCreator = creator;
    }

protected:
    /** 
     * 创建对应Widget/QML的界面对象
     * @return     QObject*
     */
    virtual QObject* createWidgetObject() const;

    /** 
     * 获取对应Widget/QML的界面对象
     * @return     QObject*
     */
    QObject* widgetObject() const;

    /** 
     * 设置对应Widget/QML的界面对象
     * @param[in]  widgetObject
     * @return     void
     */
    void setWidgetObject(QObject* widgetObject)
    {
        m_widgetObject = widgetObject;
    }

private:
    QString                     m_fieldPath;
    QPixmap                     m_icon;
    QString                     m_text;
    QString                     m_iconPath;
    QObject*                    m_widgetObject;                //!< 当前视图对应的主控件，通常显示于主窗口的中心区域
    static FieldWidgetCreator*  s_widgetCreator;
};
/*!
 * @class View
 * @brief 视图基类，代表单窗口UI的一个页面
 */
class FIELDLIBRARY_EXPORT View : public QObject
{
    Q_OBJECT
    Q_ENABLE_COPY(View)
    Q_PROPERTY(int             viewType READ     viewType  WRITE setViewType    )
    Q_PROPERTY(QString         title    READ     title     WRITE setTitle       )
    Q_PROPERTY(QString         subTitle READ     subTitle  WRITE setSubTitle    )
    Q_PROPERTY(int             flags    READ     flags     WRITE setFlags       )
    Q_PROPERTY(QWidget*        widget   READ     widget    WRITE setWidget      )
    Q_PROPERTY(QObject*        item     READ     item      WRITE setItem        )
    // Alias: widgetSource->source
    Q_PROPERTY(QUrl            source READ widgetSource WRITE setWidgetSource   )
    Q_PROPERTY(QPixmap         icon     READ     icon      WRITE setIcon        )
    Q_PROPERTY(bool            default  READ     isDefault WRITE setDefault     )
    Q_PROPERTY(QList<QAction*> actions  READ     actions   WRITE setActions     )
    Q_PROPERTY(QList<MenuItem*> menuItems READ menuItems WRITE setMenuItems)
    Q_PROPERTY(MenuItem*        menuItem READ menuItem CONSTANT)

public: 
    /*!
     * Constructor
     */
    View(QWidget *parent = 0);

    /*! 
     * 设置视图的主标题
     * @param[in]  title  视图的主标题
     */
    virtual void setTitle(QString title);

    /*! 
     * 获得视图的主标题
     * @return     QString   主标题
     */
    virtual QString title() const;

    /*! 
     * 设置视图的副标题
     * @param[in]  title  视图的副标题
     */
    virtual void setSubTitle(QString subTitle);

    /*! 
     * 获得视图的副标题
     * @return     QString   副标题
     */
    virtual QString subTitle() const;

    /*! 
     * 设置视图标志位
     * @param[in]  视图标志位
     */
    virtual void setFlags(int flags);

    /*! 
     * 获得视图标志位
     * @return     int   视图标志位
     */
    virtual int flags() const;

    /*! 
     * 设置当前视图对应的主控件
     * @param[in]  widget   当前视图对应的主控件
     */
    virtual void setWidget(QWidget* widget);

    /*! 
     * 获得当前视图对应的主控件
     * @return     QWidget*    当前视图对应的主控件
     */
    QWidget* widget() const;
    /** 
     * 设置当前视图对应的对象,此处是为了适应通过json创建QML对象
     * @return
     */
    virtual void setItem(QObject* object);

    /** 
     * 获取当前视图对应的对象
     * @return
     */
    QObject* item() const;

    /*!
     * Getter/Setter for widgetSource
     */
    QUrl widgetSource() const
    {
        return m_widgetSource;
    }
    void setWidgetSource(const QUrl& widgetSource)
    {
        m_widgetSource = widgetSource;
    }

    /*!  
     * Getter/Setter for icon
     */
    QPixmap icon() const 
    { 
        return m_icon; 
    }
    void setIcon(const QPixmap& icon) 
    { 
        m_icon = icon; 
    }

    /*!  
     * Getter/Setter for actions
     */
    QList<QAction*> actions() const;
    void setActions(const QList<QAction*>& actions);

    /*!  
     * Getter/Setter for default
     */
    bool isDefault() const
    {
        return m_default;
    }
    void setDefault(bool val)
    {
        m_default = val;
    }
	
    inline int viewType() const
    {
        return m_viewType;
    }
    inline void setViewType(int viewType)
    {
        m_viewType = viewType;
    }
    /** 
     * 设置和获取上下文按钮
     */
    QList<MenuItem*> menuItems() const
    {
        return m_menuItems;
    }
    void setMenuItems(const QList<MenuItem*> menuItems)
    {
        m_menuItems = menuItems;
    }
    MenuItem* menuItem() const
    {
        return m_menuItems.isEmpty() ? NULL : m_menuItems[0];
    }
public slots:
    /** 
     * 获取MenuItem
     * @param[in] index 索引
     */
    MenuItem* menuItem(int index);
protected: 
	int             m_viewType;                   //!< 当前视图对应的view类型
    QString         m_title;                      //!< 当前视图的标题，可能显示于标题栏等位置
    QString         m_subTitle;                   //!< 当前视图的副标题，可能显示于标题栏等位置
    /*!
     * 当前视图的选项，用于控制视图风格等
     * 该字段是按位定义的，基类中并不规定任何特殊选项，
     * 若需要使用，请在子类中定义并在MainWindow的子类中进行解析
     */
    int             m_flags;
    QObject*        m_widgetObject;        //!< 当前视图对应的主控件，通常显示于主窗口的中心区域
    QUrl            m_widgetSource;         //!< 当前视图对应的控件的脚本路径，通常是QML脚本
    QPixmap         m_icon;                 //!< 视图的缩略图标（用于显示在标题栏/菜单栏等）
    bool            m_default;              //!< 当前视图是否为默认视图，默认视图将按照加载顺序显示于页面
    QList<MenuItem*> m_menuItems;           //!< 上下文按钮
};


#endif
/*********************************************************************************************************
** End of file
*********************************************************************************************************/
