/****************************************Copyright (c)****************************************************
**
**                             INNO Instrument(China) Co.Ltd.
**
**--------------File Info---------------------------------------------------------------------------------
** File name:                  IFieldWidget.cpp
** Latest Version:             V1.0.0
** Latest modified Date:       2017/1/18
** Modified by:                
** Descriptions:               
**
**--------------------------------------------------------------------------------------------------------
** Created by:                 
** Created date:               2017/1/13
** Descriptions:               IFieldWidget __interface  [Generated by VP-UML, IGT1.2]
** 
*********************************************************************************************************/
#include "includes.h"
#include "IFieldWidget.h"

/**
 * Constructor
 */
IFieldWidget::IFieldWidget(QWidget* widget, const char* valueProperty)
    : m_widget(widget)
    , m_valueProperty(valueProperty)
    , m_IField(NULL)
    , m_enabled(true)
    , m_group(NULL)
{
}

bool IFieldWidget::getField(IField* outField) const
{
    bool ok = false;

    if (outField)
    {
        QVariant value = this->value();
        ok = outField->setData(0, 0, value, IField::FieldDataRole);
        outField->setProperty("enabled", this->isEnabled());
        outField->setProperty("max", this->max());
        outField->setProperty("min", this->min());
        outField->setProperty("step", this->step());
        outField->setProperty("default", this->getDefault());
        outField->setProperty("choiceTexts", this->choices());
        outField->setProperty("text", this->text());
    }

    return ok;
}

bool IFieldWidget::setField(IField* inField)
{
    bool ok = false;
    if (inField)
    {
        m_IField = inField;
        // 不需要对valueProperty单独设置值
       /* this->setValue(inField->data(0, 0, IField::FieldDataRole));*/
        this->setEnabled(inField->property("enabled").toBool());
        this->setMin(inField->property("min"));
        this->setMax(inField->property("max"));
        this->setStep(inField->property("step"));
        this->setDefault(inField->property("default"));
        this->setChoices(inField->property("choiceTexts").toList());
        this->setText(inField->property("text").toString());
    }

    return ok;
}

QVariant IFieldWidget::value() const
{
    const char* valueProperty = this->valueProperty();
    if (m_widget && valueProperty)
    {
        return m_widget->property(valueProperty);
    }

    return QVariant();
}

void IFieldWidget::setValue(const QVariant& value)
{
    bool ok = false;

    const char* valueProperty = this->valueProperty();
    if (m_widget && valueProperty)
    {
        ok = m_widget->setProperty(valueProperty, value);
    }

    // 应判断是否设置成功
    Q_UNUSED(ok);
    //return ok;
}

QVariant IFieldWidget::max() const
{
    return QVariant();
}

void IFieldWidget::setMax(const QVariant&)
{

}

QVariant IFieldWidget::min() const
{
    return QVariant();
}

void IFieldWidget::setMin(const QVariant&)
{

}

QVariant IFieldWidget::getDefault() const
{
    return QVariant();
}

void IFieldWidget::setDefault(const QVariant&)
{

}

QVariant IFieldWidget::step() const
{
    return QVariant();
}

void IFieldWidget::setStep(const QVariant&)
{

}

QVariantList IFieldWidget::choices() const
{
    return QVariantList();
}

void IFieldWidget::setChoices(const QVariantList&)
{

}
/*********************************************************************************************************
** End of file
*********************************************************************************************************/