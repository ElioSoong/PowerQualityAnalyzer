/****************************************Copyright (c)****************************************************
**
**                             INNO Instrument(China) Co.Ltd.
**
**--------------File Info---------------------------------------------------------------------------------
** File name:                  FieldViewFactory.cpp
** Latest Version:             V1.0.0
** Latest modified Date:       2017/1/18
** Modified by:                
** Descriptions:               
**
**--------------------------------------------------------------------------------------------------------
** Created by:                 
** Created date:               2017/1/18
** Descriptions:               FieldViewFactory class  [Generated by VP-UML, IGT1.2]
** 
*********************************************************************************************************/
#include "includes.h"
#include "FieldViewFactory.h"
#include "FieldProxy.h"
#include "FieldView.h"
#include "ContainerFieldView.h"


/**
 * Constructor
 */
FieldViewFactory::FieldViewFactory(FieldProxy* fieldProxy) : m_fieldProxy(fieldProxy)
{

}

FieldViewFactory::~FieldViewFactory()
{

}

IField* FieldViewFactory::field(QObject* object) const
{
    if (m_fieldProxy)
    {
        return m_fieldProxy->field(object);
    }

    return qobject_cast<IField*>(object);
}

/**
 * 创建一个字段视图
 * @param[in] rootObject  根对象
 * @param[in] createChildren  是否为根对象的子对象创建视图
 * @return       FieldView
 */
FieldView* FieldViewFactory::createView(QObject* rootObject, bool createChildren)
{
    IField* field = this->field(rootObject);
    if (field)
    {
        FieldView* view = NULL;
		int count = field->children().count();
        if (count > 0)
        {
            view = new ContainerFieldView();
            view->setField(field);
        }
        else
        {
            view = new FieldView(field);
        }

        QList<FieldView*> subViews;
        if (createChildren)
        {
			for (int index = 0; index < count; index++)
			{
                FieldView* subView = createView(field->children().at(index), createChildren);
                if (subView != NULL)
				{
                    subView->setParent(view);
                    subView->setField(field->children().at(index));
                    subView->setWidgetType(field->children().at(index)->editorType());
                    subViews.append(subView);
				}
			}
        }

        ContainerFieldView* containerView = qobject_cast<ContainerFieldView*>(view);
        if (containerView)
        {
            containerView->setChildren(subViews);
        }
        return view;
    }
    return NULL;
}

/*********************************************************************************************************
** End of file
*********************************************************************************************************/
 