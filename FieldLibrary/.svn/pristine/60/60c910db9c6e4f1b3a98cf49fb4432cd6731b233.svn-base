/****************************************Copyright (c)****************************************************
**
**                             INNO Instrument(China) Co.Ltd.
**
**--------------File Info---------------------------------------------------------------------------------
** File name:                  FieldWidgetFactory.cpp
** Latest Version:             V1.0.0
** Latest modified Date:       2017/1/18
** Modified by:                
** Descriptions:               
**
**--------------------------------------------------------------------------------------------------------
** Created by:                 
** Created date:               2017/1/12
** Descriptions:               FieldWidgetFactory class  [Generated by VP-UML, IGT1.2]
** 
*********************************************************************************************************/
#include "includes.h"
#include "FieldWidgetFactory.h"
#include "JsonLoader/JsonLoader.h"
#include "IField.h"
#include "IFieldWidget.h"
#include <QtWidgets/QWidget>
#include <QtWidgets/QFormLayout>
#include <QVBoxLayout>

/**
 * Constructor
 */
FieldWidgetFactory::FieldWidgetFactory() 
    : QObject()
    , m_containerWidgetTypes(QStringList())
    , m_labelWidgetType("Label")
    , m_multiChoiceWidgetType("ComboBox")
    , m_rangeWidgetType("SpinBox")
    , m_textWidgetType("LineEdit")
    , m_readOnlyWidgetType("Label")
    , m_actionWidgetType("Button")
{
    // TODO: Not yet implemented
}

QWidget* FieldWidgetFactory::createEditor(IField* field)
{
    if (field)
    {
        QString editorType = this->editorType(field);
        int editorCount = field->childCount();

        QWidget* wrapper = new QWidget;
        QHBoxLayout* layout = new QHBoxLayout(wrapper);
        layout->setContentsMargins(0, 0, 0, 0);
        for (int i = 0; i < editorCount; ++i)
        {
            IField* channelField = field->child(i);
            QWidget* channelFieldWidget = createEditorForChannelField(channelField, editorType);
            if (channelFieldWidget)
            {
                layout->addWidget(channelFieldWidget);
            }
        }
        return wrapper;
    }

    return NULL;
}

QWidget* FieldWidgetFactory::createEditorForChannelField(IField* field, const QString& editorType)
{
    QWidget* widget = qobject_cast<QWidget*>(createWidgetFromMetaType(editorType));
#if 0
    // 将统一在commitToWidget中来setField [3/13/2017 CHENHONGHAO]
    IFieldWidget* fieldWidget = qobject_cast<IFieldWidget*>(widget);
    if (fieldWidget)
    {
        fieldWidget->setField(field);
    }
#endif
    return widget;
}

QWidget* FieldWidgetFactory::createLabel(IField* field)
{
    QWidget* label = qobject_cast<QWidget*>(createWidgetFromMetaType(m_labelWidgetType));
    if (label)
    {
        label->setProperty("text", field->text());
    }
    return label;
}

QString FieldWidgetFactory::editorType(IField* field)
{
    QString editorType = field->editorType();
    return editorType;
}

/**
 * 创建字段对应的完整控件，可以直接创建出来标题和数值编辑控件并加入指定的父布局中
 * @param[in] field  字段
 * @param[in] createLabel  是否创建标题Label（如果不创建则相当于只创建编辑字段）
 * @param[in] parentLayout  父布局，如果指定了父布局则会将当前控件加入父布局
 * @return       QWidget
 */
QObject* FieldWidgetFactory::createWidget(
    IField* field, 
    Qt::Orientation direction,
    bool createLabel
    )
{
    // TODO: Not implemented yet
    QWidget* editor = this->createEditor(field);
    if (createLabel)
    {
        QWidget* label = this->createLabel(field);

        if (direction == Qt::Horizontal)
        {
            QWidget* wrapper = new QWidget();
            QFormLayout* formLayout = new QFormLayout(wrapper);
            formLayout->addRow(label, editor);
            return wrapper;
        }
        else if (direction == Qt::Vertical)
        {
            QWidget* wrapper = new QWidget();
            QVBoxLayout* vLayout = new QVBoxLayout(wrapper);
            vLayout->addWidget(label);
            vLayout->addWidget(editor);
            return wrapper;
        }
        
    }

    return editor;
}

QObject* FieldWidgetFactory::createContainer(int level /*= 0*/, QLayout* parentLayout /*= NULL*/)
{
    if (level >= 0 && level < m_containerWidgetTypes.count())
    {
        QString containerType = m_containerWidgetTypes[level];
        return createWidgetFromMetaType(containerType);
    }

    return NULL;
}

QObject* FieldWidgetFactory::createWidgetFromMetaType(const QString& metaTypeName)
{
    int metaTypeId = GET_METATYPE_ID_METHOD(metaTypeName.toLatin1().constData());
    if (metaTypeId != QMetaType::UnknownType)
    {
        QObject* object = (QObject*)CREATE_METATYPE_OBJECT_METHOD(metaTypeId);
        return object;
    }

    return NULL;
}

/*********************************************************************************************************
** End of file
*********************************************************************************************************/