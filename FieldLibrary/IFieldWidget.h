/****************************************Copyright (c)****************************************************
**
**                             INNO Instrument(China) Co.Ltd.
**
**--------------File Info---------------------------------------------------------------------------------
** File name:                  IFieldWidget.h
** Latest Version:             V1.0.0
** Latest modified Date:       2017/1/18
** Modified by:                
** Descriptions:               
**
**--------------------------------------------------------------------------------------------------------
** Created by:                 
** Created date:               2017/1/13
** Descriptions:               IFieldWidget __interface  [Generated by VP-UML, IGT1.2]
** 
*********************************************************************************************************/
#ifndef __IFIELDWIDGET_H__
#define __IFIELDWIDGET_H__

#include "fieldlibrary_global.h"

#include "IField.h"
#include <QVariant>
#include <QWidget>
class WidgetGroup;

class FIELDLIBRARY_EXPORT IFieldWidget 
{
public:
    /**
     * Constructor
     */
    IFieldWidget(QWidget* widget = NULL, const char* valueProperty = NULL);

    /** 
     * 将widget中的数据导出到字段
     * @param[out] outField 输出字段
     * @return     bool 操作成功返回true
     */
    bool getField(IField* outField) const;

    /** 
     * 将字段中的数据导入widget
     * @param[in]  inField 输入字段
     * @return     bool 操作成功返回true
     */
    bool setField(IField* inField);

    /** 
     * 获取当前值对应的Q_PROPERTY名称，这个接口的优先级最高，如果指定了属性，则无需再实现value/setValue
     * @return     const char* 当前值对应的Q_PROPERTY名称
     * @note       此函数可以简化绝大部分标准控件的设计，例如QLineEdit的子类只需要实现此接口并返回"text"。
     */
    const char* valueProperty() const
    {
        return m_valueProperty;
    }
    /*!
    * 控件text属性值
    */
    virtual void setText(const QString& text)
    {
        Q_UNUSED(text)
    }

    virtual QString text() const
    {
        return "";
    }
    /**
     * 获取当前值
     * @return       QVariant
     */
    virtual QVariant value() const;

    /**
     * 设置当前值
     * @param[in] value 
     */
    virtual void setValue(const QVariant&);

    /**
     * 获取最大值
     * @return       QVariant
     */
    virtual QVariant max() const;

    /**
     * 设置最大值
     * @param[in] max 
     */
    virtual void setMax(const QVariant&);

    /**
     * 获取最小值
     * @return       QVariant
     */
    virtual QVariant min() const;

    /**
     * 设置最小值
     * @param[in] min 
     */
    virtual void setMin(const QVariant&);

    /**
     * 获取默认值（命名需要避开default关键字）
     * @return       QVariant
     */
    virtual QVariant getDefault() const;

    /**
     * 设置默认值
     * @param[in] def 
     */
    virtual void setDefault(const QVariant&);

    /**
     * 获取步进值
     * @return       QVariant
     */
    virtual QVariant step() const;

    /**
     * 设置步进值
     * @param[in] step 
     */
    virtual void setStep(const QVariant&);

    /**
     * 获取自定义选项列表
     * @return       QVariantList
     */
    virtual QVariantList choices() const;

    /**
     * 设置自定义选项列表
     * @param[in] choices 
     */
    virtual void setChoices(const QVariantList&);

    /**
     * 设置部件使能
     * @param[in] enabled 
     */
    virtual void setEnabled(bool enabled)
    {
        m_enabled = enabled;
    }
    virtual bool isEnabled() const
    {
        return m_enabled;
    }
    /**
     * 设置部件分组
     * @param[in] buttonGroup 
     */
    WidgetGroup* group() const
    {
        return m_group;
    }

    void setGroup(WidgetGroup* buttonGroup)
    {
        m_group = buttonGroup;
    }

protected:
    QWidget*        m_widget;
    const char*     m_valueProperty;
    IField*         m_IField;
    bool            m_enabled;  //!< 部件使能
    WidgetGroup*    m_group;
};
#define IFieldWidget_IID "com.inno.IFieldWidget"
Q_DECLARE_INTERFACE(IFieldWidget, IFieldWidget_IID)
#endif
/*********************************************************************************************************
** End of file
*********************************************************************************************************/