/****************************************Copyright (c)****************************************************
**
**                                       D.H. InfoTech
**
**--------------File Info---------------------------------------------------------------------------------
** File name:                  View.cpp
** Latest Version:             V1.0.0
** Latest modified Date:       2016/3/1
** Modified by:                
** Descriptions:               
**
**--------------------------------------------------------------------------------------------------------
** Created by:                 
** Created date:               2016/2/29
** Descriptions:               View class  [Generated by VP-UML, IGT1.0]
** 
*********************************************************************************************************/
#include "includes.h"
#include "Test.h"

#include <QDebug>


/**
 * Constructor
 */
View::View() : 
    QObject(),
    m_widget(NULL), 
    m_flags(0), 
    m_bool1(false), 
    m_bool2(false), 
    m_viewFlags(0), 
    m_lineEdit(NULL), 
    m_defaultButton(new QPushButton()),
    m_view(new ChildView())
{
}

View::View(const View& other) :
    QObject(),
    m_widget(NULL), 
    m_flags(0), 
    m_bool1(false), 
    m_bool2(false), 
    m_viewFlags(0), 
    m_lineEdit(NULL), 
    m_defaultButton(new QPushButton()),
    m_view(new ChildView())
{
    qDebug() << "View::View(const View& other) called.";
    setObjectName(other.objectName());
}

    /**
 * 
 * @param[$paramDirection]title	$paramDocumentRaw
 */
void View::setTitle(QString title)
{
    this->m_title = title;
}

/**
 * 
 * @return      
 */
QString View::getTitle() const
{
    return this->m_title;
}

/**
 * 
 * @param[$paramDirection]subTitle	$paramDocumentRaw
 */
void View::setSubTitle(QString subTitle)
{
    this->m_subTitle = subTitle;
}

/**
 * 
 * @return      
 */
QString View::getSubTitle() const
{
    return this->m_subTitle;
}

/**
 * 
 * @param[$paramDirection]flags	$paramDocumentRaw
 */
void View::setFlags(int flags)
{
    this->m_flags = flags;
}

/**
 * 
 * @return      
 */
int View::getFlags() const
{
    return this->m_flags;
}

/**
 * 
 * @param[$paramDirection]widget	$paramDocumentRaw
 */
void View::setWidget(QWidget* widget)
{
    this->m_widget = widget;
}

/**
 * 
 * @return      
 */
QWidget* View::getWidget() const
{
    return this->m_widget;
}

void View::slot1(bool checked)
{
    qDebug() << objectName() << ":slot1:checked=" << checked;
}

bool View::slot2( const QString& param1 )
{
    qDebug() << objectName() << ":slot2:p1=" << param1;
    return true;
}

void View::slot2( const QString& param1, int param2 )
{
    qDebug() << objectName() << ":slot2:p1=" << param1 << ",p2=" << param2;
}

void View::slot3( int a ) const
{
    qDebug() << objectName() << ":slot3: a=" << a;
}

void View::setDefaultButtonText( const QString& text )
{
    m_defaultButtonText = text;
    defaultButtonTextChanged();

    foreach (QPushButton* button, m_buttons)
    {
        if (button)
        {
            QString buttonText = button->text();
            //qDebug() << "Button: id=" << button->objectName() << ", text=" << button->text();
            if (buttonText == text)
            {
                m_defaultButton = button;
                return;
            }
        }
    }

#if 0
    Q_ASSERT_X(
        false, 
        "View::setDefaultButtonText", 
        "This is a test function, if we hit here, "
        "the button text is initialized after sibling properties."
        );
#endif
}

/*********************************************************************************************************
** End of file
*********************************************************************************************************/