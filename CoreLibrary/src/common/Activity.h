/****************************************Copyright (c)****************************************************
**
**                                       D.H. InfoTech
**
**--------------File Info---------------------------------------------------------------------------------
** File name:                  Activity.h
** Latest Version:             V1.0.0
** Latest modified Date:       2016/3/2
** Modified by:                
** Descriptions:               
**
**--------------------------------------------------------------------------------------------------------
** Created by:                 
** Created date:               2016/2/29
** Descriptions:               Activity class  [Generated by VP-UML, IGT1.0]
** 
*********************************************************************************************************/
#ifndef __ACTIVITY_H__
#define __ACTIVITY_H__

#include <QAbstractProxyModel>
#include "FieldLibrary/FieldProxyModel.h"
#include "corelibrary_global.h"
#include <QObject>
#include <QtGui/QPixmap>

#include "FieldLibrary/View.h"
#include "storage/StorageItem.h"

class CORELIBRARY_EXPORT ConfigItem : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString path READ path WRITE setPath)
    Q_PROPERTY(QVariant data READ data WRITE setData)
    Q_PROPERTY(int role READ role WRITE setRole)
public:
    ConfigItem() {}
    ConfigItem(const ConfigItem &){}
    void setPath(const QString &path)
    {
        m_path = path;
    }
    QString path() const
    {
        return m_path;
    }
    void setData(const QVariant &data)
    {
        m_data = data;
    }
    QVariant data() const
    {
        return m_data;
    }
    void setRole(int v)
    {
        m_role = v;
    }
    int role() const
    {
        return m_role;
    }
private:
    QString  m_path;
    QVariant m_data;
    int      m_role;
};

class CORELIBRARY_EXPORT DataItem : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString path READ path WRITE setPath)
    Q_PROPERTY(QVariant data READ data WRITE setData)
    Q_PROPERTY(int role READ role WRITE setRole)
public:
    DataItem() {}
    DataItem(const DataItem &){}
    void setPath(const QString &path)
    {
        m_path = path;
    }
    QString path() const
    {
        return m_path;
    }
    void setData(const QVariant &data)
    {
        m_data = data;
    }
    QVariant data() const
    {
        return m_data;
    }
    void setRole(int v)
    {
        m_role = v;
    }
    int role() const
    {
        return m_role;
    }
private:
    QString  m_path;
    QVariant m_data;
    int      m_role;
};
/*!
 * @class Activity
 * @brief 测量活动，指任何从主界面选择进入的工作模式、测量功能之类的概念，例如故障检查、谐波测量、系统设置等
 */
class CORELIBRARY_EXPORT Activity : public QObject
{
    Q_OBJECT
    Q_ENABLE_COPY(Activity)
    Q_PROPERTY(int mode     READ mode    WRITE setMode)                                      //!< 本次测量活动的模式
    Q_PROPERTY(QString name     READ name    WRITE setName   MEMBER m_name)                  //!< 本次测量活动的名称
    Q_PROPERTY(QPixmap icon     READ icon    WRITE setIcon   MEMBER m_icon)                  //!< 本次测量活动所使用的图标
    Q_PROPERTY(QString iconPath     READ iconPath    WRITE setIconPath)                      //!< 本次测量活动所使用的图标路径
    Q_PROPERTY(QString description     MEMBER m_description)                                 //!< 本次测量活动的描述 
    Q_PROPERTY(View* defaultView       MEMBER m_defaultView)                                 //!< 本次测量活动所使用的默认视图
    Q_PROPERTY(QList<View *> views     MEMBER m_views)                                       //!< 本次测量活动使用的所有view
    Q_PROPERTY(QList<ConfigItem *> configItems READ configItems WRITE setConfigItems)        //!< 本次测量活动的配置
    Q_PROPERTY(QList<StorageItem *> storageItems READ storageItems WRITE setStorageItems)    //!< 本次测量存储项
    Q_PROPERTY(QList<DataItem*> dataItems READ dataItems WRITE setDataItems)                 //!< 本次测量活动感兴趣的测量项
    Q_PROPERTY(QList<MenuItem*> menuItems READ menuItems WRITE setMenuItems)                 //!< 本次测量活动的上下文按钮
    Q_PROPERTY(QAbstractItemModel* sourceModel READ sourceModel WRITE setSourceModel)
    Q_PROPERTY(QAbstractProxyModel* dataModel READ dataModel CONSTANT)


public:
    /*!
     * Constructor
     */
    Activity(QObject* parent = NULL) : QObject(parent), m_defaultView(NULL)
    {
        m_dataModel = new FieldProxyModel;
    }
    ~Activity()
    {
        if (m_dataModel)
        {
            delete m_dataModel;
            m_dataModel = NULL;
        }
    }
public: 

    QList<View*> views() const
    {
        return m_views;
    }

    QList<StorageItem*> storageItems() const
    {
        return m_storageItems;
    }
    void setStorageItems(QList<StorageItem*> storageItems)
    {
        m_storageItems = storageItems;
    }
    /*!
     * 启动当前测量活动，该函数是多态的，可以通过重写的方式实现某些测量活动的特殊操作
     * @return       操作成功返回true
     */
    virtual bool start();
    /*!
     * 停止当前测量活动，该函数是多态的，可以通过重写的方式实现某些测量活动的特殊操作
     * @return       操作成功返回true
     */
    virtual bool stop();

    /*! 
     * 获得本次测量活动所使用的图标
     * @return     QT_NAMESPACE::QPixmap 本次测量活动所使用的图标
     */
    inline QPixmap icon() const
    {
        if (m_iconPath.isEmpty())
        {
            return m_icon;
        }
        else
        {
            return QPixmap(m_iconPath);
        }
    }

    /*! 
     * 设置本次测量活动所使用的图标
     * @param[in]  icon qpixmap类型对象
     */
    inline void setIcon(const QPixmap& icon)
    {
        m_icon = icon;
    }

    inline QString iconPath() const
    {
        return m_iconPath;
    }
    inline void setIconPath(const QString& path)
    {
        m_iconPath = path;
    }

    /*! 
     * 获得本次测量活动的名称
     * @return     QString  返回本次测量活动的名称
     */
    inline QString name() const
    {
        if (m_name.isEmpty())
            return objectName();
        return m_name;
    }

    /*! 
     * 设置本次测量活动的名称
     * @param[in]  name  测量活动的名称
     */
    inline void setName(const QString& name)
    {
        m_name = name;
    }

    /*! 
     * 本次测量活动的描述
     * @return  QString 本次测量活动的描述
     */
    inline QString description() const
    {
        return m_description;
    }

    /*! 
     * 本次测量活动的默认视图，启动该活动将导致由主界面切换至该视图
     * @return     本次测量活动的默认视图
     */
    inline View* defaultView() const
    {
        return m_defaultView;
    }

    inline void setDefaultView(View* view)
    {
        m_defaultView = view;
    }

    /** 
     * 
     * @param[in]本次测量活动的测量模式
     */
    inline int mode() const
    {
        return m_mode;
    }

    inline void setMode(int modeId)
    {
        m_mode = modeId;
    }

    /** 
     * 设置和获取测量活动的配置
     */
    void setConfigItems(const QList<ConfigItem *> items)
    {
        m_configItems = items;
    }

    QList<ConfigItem *> configItems() const
    {
        return m_configItems;
    }
    /** 
     * 设置或获取测量活动的感兴趣的测量项
     */
    void setDataItems(const QList<DataItem*> items)
    {
        m_dataItems = items;
        QStringList lst;
        foreach (DataItem* item, m_dataItems)
        {
            if (item)
            {
                lst.append(item->path());
            }
        }
        m_dataModel->setWhiteList(lst);
    }

    QList<DataItem*> dataItems() const
    {
        return m_dataItems;
    }
    /** 
     * 设置或获取当前视图的上下文按钮
     */
    void setMenuItems(const QList<MenuItem*> items)
    {
        m_menuItems = items;
    }

    QList<MenuItem*> menuItems() const
    {
        return m_menuItems;
    }

    QAbstractProxyModel* dataModel() const
    {
        return m_dataModel;
    }
    void setSourceModel(QAbstractItemModel * sourceModel)
    {
        m_sourceModel = sourceModel;
        m_dataModel->setSourceModel(sourceModel);
    }
    QAbstractItemModel* sourceModel() const
    {
        return m_sourceModel;
    }
signals:
    /*!
     * 当前测量活动已启动
     */
    void started();

    /*!
     * 当前测量活动已停止
     */
    void stopped();

protected: 
    QString         m_name;                       //!< 当前测量活动的名称，通常用于主页显示
    QString         m_description;                //!< 当前测量活动的描述，通常用于tooltip等帮助页面
    QPixmap         m_icon;                       //!< 当前测量活动的图标，通常用于主页显示
    QString         m_iconPath;                   //!< 当前测量活动的图标路径
    View            *m_defaultView;               //!< 当前测量活动的默认视图，从主页启动该测量活动后，将导航至该默认视图
    int             m_mode;                       //!< 测量模式ID
    QList<View *>           m_views;              //!< 本次测量使用的视图
    QList<StorageItem *>    m_storageItems;       //!< 本次测量中使用的存储项
    QList<ConfigItem *>     m_configItems;        //!< 本次测量活动的使用的配置
    QList<DataItem*>         m_dataItems;         //!< 本次测量活动感兴趣的项
    QList<MenuItem*>         m_menuItems;         //!< 测量活动上下文按钮
    QList<QVariant>         m_previousConfig;     //!< 测量活动开始前的配置数据
    FieldProxyModel*        m_dataModel;          //!< 
    QAbstractItemModel*     m_sourceModel;        //!< 
};

#endif
/*********************************************************************************************************
** End of file
*********************************************************************************************************/