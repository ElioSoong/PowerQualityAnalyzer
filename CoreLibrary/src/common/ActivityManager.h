/****************************************Copyright (c)****************************************************
**
**                             INNO Instrument(China) Co.Ltd.
**
**--------------File Info---------------------------------------------------------------------------------
** File name:                  ActivityManager.h
** Latest Version:             V1.0.0
** Latest modified Date:       
** Modified by:
** Descriptions:
**
**--------------------------------------------------------------------------------------------------------
** Created by:
** Created date:               2017/5/4
** Descriptions:               ActivityManager class  [Generated by VP-UML, IGT1.2]
**
*********************************************************************************************************/
#pragma once
#include "corelibrary_global.h"
#include <QObject>
#include "Activity.h"
#include "ObjectListModel.h"

#define foreach Q_FOREACH
class CORELIBRARY_EXPORT ActivityManager : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QList<Activity*> activities READ activities WRITE setActivities)
    Q_PROPERTY(ObjectListModel* model READ model)
public:
    ActivityManager();
    ~ActivityManager();

    static ActivityManager* instance();

    Activity* activity(int index);
    /** 
     * 获取测量活动
     * @param[in] 测量活动名字
     * @return
     */
    Activity* activity(const QString &name);
    Activity* curActivity() const
    {
        return m_curActivity;
    }
    /** 
     * 设置和获取所有测量活动项
     */
    void setActivities(const QList<Activity*> activities)
    {
        m_activities = activities;
        QObjectList objectList;
        int count = activities.count();
        for (int i = 0; i < count; ++i)
        {
            objectList.append(activities[i]);
        }
        m_model->setObjectList(objectList);
    }
    QList<Activity*> activities() const
    {
        return m_activities;
    }
    /** 
     * 获取model
     */
    ObjectListModel* model() const
    {
        return m_model;
    }
    public slots:
    /** 
     * 开始测量活动
     * @param[in] activityName 测量活动的名字
     */
    Q_INVOKABLE bool start(const QString &activityName);
    /** 
     * 开始测量活动 
     * @param[in] index测量活动索引
     */
    Q_INVOKABLE bool start(int index);
    /** 
     * 停止测量活动
     * @param[in] activityName 测量活动的名字
     */
    Q_INVOKABLE bool stop(const QString &activityName);
    /** 
     * 停止测量活动 
     * @param[in] index测量活动索引
     */
    Q_INVOKABLE bool stop(int index);
    /** 
     * 停止测量活动 
     * @param[in] index测量活动索引
     */
    Q_INVOKABLE bool stop();
    /** 
     * 重启测量活动
     * @param[in] activityName 测量活动的名字
     */
    Q_INVOKABLE bool restart(const QString &activityName);
    /** 
     * 重启测量活动 
     * @param[in] index测量活动索引
     */
    Q_INVOKABLE bool restart(int    index);
    /** 
     * 获取测量活动
     * @param[in] 测量活动索引
     * @return
     */
signals:
    /** 
     * 启动、停止、重新启动测量活动信号
     */
    void startActivity(Activity* activity);
    void stopActivity(Activity* activity);
    void restartActivity(Activity* activity);
    void activityStarted(Activity* activity);
    void activityStoped();
private:
    QList<Activity*> m_activities;           //!< 所有的测量活动
    ObjectListModel *m_model;               //!< 管理测量活动的model
    Activity *m_curActivity;
    static ActivityManager *s_instance;
};

