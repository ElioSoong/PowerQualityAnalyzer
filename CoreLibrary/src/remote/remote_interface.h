/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p remote_interface.h: remote.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef REMOTE_INTERFACE_H_1492155903
#define REMOTE_INTERFACE_H_1492155903

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.inno.f280.remote
 */
class ComInnoF280RemoteInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.inno.f280.remote"; }

public:
    ComInnoF280RemoteInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComInnoF280RemoteInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> changeSyncSrcMode(int mode, int channel)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mode) << QVariant::fromValue(channel);
        return asyncCallWithArgumentList(QStringLiteral("changeSyncSrcMode"), argumentList);
    }

    inline QDBusPendingReply<> emulateGesture()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("emulateGesture"), argumentList);
    }

    inline QDBusPendingReply<> emulateKey(int type, int key, int modifier)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(key) << QVariant::fromValue(modifier);
        return asyncCallWithArgumentList(QStringLiteral("emulateKey"), argumentList);
    }

    inline QDBusPendingReply<> emulateMouse(int type, int x, int y, int button)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(x) << QVariant::fromValue(y) << QVariant::fromValue(button);
        return asyncCallWithArgumentList(QStringLiteral("emulateMouse"), argumentList);
    }

    inline QDBusPendingReply<> emulateTouch()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("emulateTouch"), argumentList);
    }

    inline QDBusPendingReply<bool> loadStorageInfo(int index)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index);
        return asyncCallWithArgumentList(QStringLiteral("loadStorageInfo"), argumentList);
    }

    inline QDBusPendingReply<QString> readField(const QString &path, const QString &role, int row, int col)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path) << QVariant::fromValue(role) << QVariant::fromValue(row) << QVariant::fromValue(col);
        return asyncCallWithArgumentList(QStringLiteral("readField"), argumentList);
    }

    inline QDBusPendingReply<bool> removeStorageInfo(int index)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index);
        return asyncCallWithArgumentList(QStringLiteral("removeStorageInfo"), argumentList);
    }

    inline QDBusPendingReply<bool> renameStorageFile(int index, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index) << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QStringLiteral("renameStorageFile"), argumentList);
    }

    inline QDBusPendingReply<bool> requestAnalyzerRestart(const QString &activityName)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activityName);
        return asyncCallWithArgumentList(QStringLiteral("requestAnalyzerRestart"), argumentList);
    }

    inline QDBusPendingReply<bool> requestAnalyzerStart(const QString &activityName, const QString &time)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(activityName) << QVariant::fromValue(time);
        return asyncCallWithArgumentList(QStringLiteral("requestAnalyzerStart"), argumentList);
    }

    inline QDBusPendingReply<bool> requestAnalyzerStop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestAnalyzerStop"), argumentList);
    }

    inline QDBusPendingReply<QString> requestDeviceID()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestDeviceID"), argumentList);
    }

    inline QDBusPendingReply<bool> requestFirewareUpgrade()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestFirewareUpgrade"), argumentList);
    }

    inline QDBusPendingReply<QString> requestFirewareVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestFirewareVersion"), argumentList);
    }

    inline QDBusPendingReply<bool> requestGPSStatus()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestGPSStatus"), argumentList);
    }

    inline QDBusPendingReply<bool> requestSetSystemTime(const QString &time)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(time);
        return asyncCallWithArgumentList(QStringLiteral("requestSetSystemTime"), argumentList);
    }

    inline QDBusPendingReply<bool> requestSystemReboot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestSystemReboot"), argumentList);
    }

    inline QDBusPendingReply<bool> requestSystemRootLogin(const QString &code)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(code);
        return asyncCallWithArgumentList(QStringLiteral("requestSystemRootLogin"), argumentList);
    }

    inline QDBusPendingReply<bool> requestSystemRootLogout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestSystemRootLogout"), argumentList);
    }

    inline QDBusPendingReply<bool> requestSystemShutdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestSystemShutdown"), argumentList);
    }

    inline QDBusPendingReply<QDBusVariant> requestSystemSnapshot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestSystemSnapshot"), argumentList);
    }

    inline QDBusPendingReply<QString> requestSystemTime()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("requestSystemTime"), argumentList);
    }

    inline QDBusPendingReply<bool> saveStorageInfo(int index)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index);
        return asyncCallWithArgumentList(QStringLiteral("saveStorageInfo"), argumentList);
    }

    inline QDBusPendingReply<QString> storageFileList()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("storageFileList"), argumentList);
    }

    inline QDBusPendingReply<int> storageItemCount()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("storageItemCount"), argumentList);
    }

    inline QDBusPendingReply<QString> storageItemInfo(int index)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index);
        return asyncCallWithArgumentList(QStringLiteral("storageItemInfo"), argumentList);
    }

    inline QDBusPendingReply<bool> writeField(const QString &path, const QString &role, const QDBusVariant &data, int row, int col)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path) << QVariant::fromValue(role) << QVariant::fromValue(data) << QVariant::fromValue(row) << QVariant::fromValue(col);
        return asyncCallWithArgumentList(QStringLiteral("writeField"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace inno {
    namespace f280 {
      typedef ::ComInnoF280RemoteInterface remote;
    }
  }
}
#endif
