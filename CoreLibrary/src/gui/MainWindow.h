/****************************************Copyright (c)****************************************************
**
**                                       D.H. InfoTech
**
**--------------File Info---------------------------------------------------------------------------------
** File name:                  MainWindow.h
** Latest Version:             V1.0.0
** Latest modified Date:       2016/3/2
** Modified by:                
** Descriptions:               
**
**--------------------------------------------------------------------------------------------------------
** Created by:                 
** Created date:               2016/2/29
** Descriptions:               MainWindow class  [Generated by VP-UML, IGT1.0]
** 
*********************************************************************************************************/
#ifndef __MAINWINDOW_H__
#define __MAINWINDOW_H__

#include "corelibrary_global.h"
#include <QMainWindow>
#include <QStack>
#include <QtWidgets/QHBoxLayout>
#include <QLabel>
#include <QTimer>
#include <QProcess>
//#include "pqa/PQA.h"
#include "HintMsgBox.h"

class Activity;
class View;
class HomepageWidget;

/*!
 * @class MainWindow
 * @brief 主窗口：窗口管理器+活动管理器
 */
class CORELIBRARY_EXPORT MainWindow : public QMainWindow
{
    Q_OBJECT

public: 
    /*!
     * Constructor
     */
    MainWindow(QWidget *parent = 0);
    MainWindow(MainWindow const& mainwindow){}
    virtual ~MainWindow() {}

    /*! 
     * 获取主窗口的全局唯一实例
     * @return     主窗口的全局唯一实例，若不存在则创建之
     */
    static MainWindow* instance();

    /*!
     * 截图并保存至指定的图片文件
     * @param[in]    savePath	 图片保存路径
     * @return       操作成功返回true
     */
    virtual bool snapshot(QWidget* widget = NULL, const QString& savePath = QString());

    /*!
     * 获得当前的测量活动
     * @return       测量活动，指任何从主界面选择进入的工作模式、测量功能之类的概念，例如故障检查、谐波测量、系统设置等
     */
    Activity* currentActivity() const;

    /*!
     * 启动一个测量活动
     * 一般来讲每个测量活动对应主页的一个图标，点击该图标则启动对应的测量活动
     * @param[in]    activity	 需要启动的测量活动对象
     * @return       操作成功返回true
     */
    virtual bool startActivity(Activity* activity);

    /*!
     * 重新启动测量活动
     * @return       操作成功返回true
     */
    virtual bool restartActivity();

    /*!
     * 停止当前的测量活动
     * @return       操作成功返回true
     */
    virtual bool stopActivity();

    /** 
     * 设置是否显示当前主窗口
     * @param[in] show 是否显示
     * @return    void
     */
    virtual void showWindow(bool show = true);

    /*! 
     * 设置主页对象，可用于子类初始化时使用
     * @param[in]  homepage 主页对象
     */
    void setHomepage(View* homepage)
    {
        m_homepage = homepage;
    }

    /*! 
     * 设置配置视图对象，可用于子类初始化时使用
     * @param[in]  setup 配置视图对象
     */
    void setSetupView(View* setup)
    {
        m_setupView = setup;
    }

    /*!
     * 实现视图导航，即切换至指定页面，但由于基类不知道布局等具体信息，因此只能在每个项目中独立实现
     * @param[in]    view	 导航目标视图
     * @return       操作成功返回true
     */
    Q_SLOT virtual bool navigateTo(View* view, bool canNavigateBack = true);

    /*! 
     * 返回当前的主视图
     * @return     当前的主视图
     */
    inline View* currentView() const
    {
        return m_currentView;
    }

    /*!
     * 回到首页
     * @return       操作成功返回true
     */
    Q_SLOT virtual bool navigateHome();

    /*!
     * 向后导航
     * @return       操作成功返回true
     */
    Q_SLOT virtual bool navigateBack();

    /*! 
     * 当前是否处于锁屏状态
     * @return     bool
     */
    bool isScreenLocked() const;

    /*! 
     * 判断屏幕锁是否可见
     * @return     bool
     */
    bool isScreenLockVisible() const;

    /*! 
     * 根据lock的状态显示锁
     * @return     void
     */
    void showScreenLock(bool, QWidget* w = 0);
	/*! 
	 * 抓屏时显示抓屏图标
	 */
	void showCaptureScreenIcon(QWidget* w = 0);
    /*! 
     *  启动校准屏幕程序
     */
    void CalibrationScreen();
protected:
    /*!
     * 设置前台显示控件，包括布局变更、父子关系变更等操作
     * @param[in]    view	 需要前台显示的视图，内部包含QWidget控件
     * @return       操作成功返回true
     */
    virtual bool setViewWidget(View* view) = 0;

    /*!
     * 设置标题
     * @param[in]    title	 主标题
     * @return       操作成功返回true
     */
    virtual bool setTitle(const QString& title) = 0;

    /*!
     * 设置副标题，注意某些项目中是没有副标题的
     * @param[in]    subTitle	 副标题
     * @return       操作成功返回true
     */
    virtual bool setSubTitle(const QString& subTitle) = 0;

    /*!
     * 按键事件处理函数，请注意：
     * 1.需要在初始化时调用grabKeyboard才能拦截其他对象的按键事件
     * 2.如果不能处理当前事件，请将该事件转发给currentView，避免事件丢失（直接调用currentView的event即可）
     * 3.如果事件传递已经死循环，应尽可能做防护
     * @param[in]    event	 输入事件
     * @return       操作成功返回true
     */
    virtual bool event(QEvent* event);

    /*! 
     * 槽函数，用于响应主界面中点击某个图标的点击信号，执行的操作为启动该图标对应的测量活动
     * @param[in]  activityIndex 图标对应的ActivityModel的模型索引
     */
    Q_SLOT void onHomepageActivated(const QModelIndex& activityIndex);

    virtual bool setFullScreenWidget(QWidget *widget);

signals:
    /*! 
     * 屏幕被lock和unlock时发送的信号
     * @return     void
     */
    void screenLocked(bool);

protected: 
    Activity*           m_currentActivity;              //!< 当前的测量活动
    View*               m_currentView;                  //!< 当前前台显示的视图
    QWidget*            m_centralWidget;                //!< 中心控件
    QHBoxLayout*        m_centralLayout;                //!< 中心布局，实际上仅负责将中心控件最大化
    View*               m_homepage;                     //!< 主页对象
    View*               m_setupView;                    //!< 设置视图对象
    View*               m_aboutView;                    //!< 关于视图对象
    QStack<View*>       m_viewStack;                    //!< 视图栈，用于向后导航（navigateBack）
    QLabel              m_screenLock;                   //!< 锁屏和解锁时候的图标
    bool                m_locked;                       //!< 当前是否处在locked状态
    QTimer              m_lockTimer;                    //!< 隐藏屏幕锁的定时器
    QTimer              m_captureScreenTimer;           //!< 隐藏抓屏图标的定时器
    QLabel              m_captureScreenIcon;            //!< 抓屏时的图标
    QProcess           *m_calibrationScreenProcess;     //!< 校准屏幕进程
    /*!
     * 对应功能键（F1-F12）的快捷切换页面。
     * 例如在F217项目中，包含KEY1和KEY2两个功能键，
     * 这两个按键可以被绑定到两个动态Page对象上，
     * 并由mainWindow对象实现标准切换动作。
     */
    QList<View*>        m_functionViews;

    HomepageWidget*     m_homepageWidget;               //!< 主页中的功能列表（图标加文字描述），需要封装到View中使用

    static MainWindow*  s_instance;                     //!< mainwindow句柄
};


#endif
/*********************************************************************************************************
** End of file
*********************************************************************************************************/